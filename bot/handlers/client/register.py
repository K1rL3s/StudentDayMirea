import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)
from dishka import FromDishka

from bot.states import Registration
from database.repos.users import UsersRepo

router = Router(name=__file__)


@router.message(Registration.name, F.text)
async def register_name_handler(message: Message, state: FSMContext) -> None:
    full_name = message.text.strip()
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+$", full_name):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    text = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n–í–∞—Å –∑–æ–≤—É—Ç <b>{full_name}</b>?"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="yes"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="no"),
            ],
        ],
    )
    await message.answer(text=text, reply_markup=keyboard)

    await state.set_state(Registration.confirm)
    await state.update_data(full_name=full_name)


@router.callback_query(Registration.confirm, F.data == "yes")
async def register_confirm_handler(
    callback: CallbackQuery,
    state: FSMContext,
    owner_id: int,
    users_repo: FromDishka[UsersRepo],
) -> None:
    state_data = await state.get_data()
    user_id = callback.from_user.id

    await users_repo.update(user_id, state_data["full_name"], user_id == owner_id)

    text = (
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! üéâ\n\n<b>–í–∞—à id: {user_id}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑—ã–≤–∞—Ç—å <b>–º–µ–Ω—é</b> –∫–æ–º–∞–Ω–¥–æ–π <i>/menu</i>"
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/menu")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await callback.message.answer_sticker(
        r"CAACAgIAAxkBAAEM7dhnAxdZxlqB__bt8a5GR5wo9-vxJAACDQADWbv8JS5RHx3i_HUDNgQ",
    )
    await callback.message.answer(text=text, reply_markup=keyboard)
    await callback.message.delete()
    await state.clear()


@router.callback_query(Registration.confirm, F.data == "no")
async def register_disconfirm_handler(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    await callback.message.answer("–ë—ã–≤–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    await callback.message.delete()
    await state.set_data({})
    await state.set_state(Registration.name)
