import asyncio
import re
from os import getenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject, CommandStart, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    BotCommand,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message
)
from database import DB

TOKEN = getenv("TOKEN")
DATABASE_URL = (f"postgres://{getenv('POSTGRES_USER')}:{getenv('POSTGRES_PASSWORD')}@{getenv('POSTGRES_HOST')}:"
                f"{getenv('POSTGRES_PORT')}/{getenv('POSTGRES_DB')}?sslmode=disable")
OWNER = int(getenv("OWNER"))

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = DB()


class Registration(StatesGroup):
    name = State()
    confirm = State()


class TransferFunds(StatesGroup):
    receiver_id = State()
    amount = State()


class ViewProductCallback(CallbackData, prefix="view"):
    id: int


class BuyProductCallback(CallbackData, prefix="buy"):
    id: int


class StartStage(StatesGroup):
    participant_id = State()
    reward_amount = State()


class SalesmanShop(StatesGroup):
    product_id = State()
    buyer_id = State()


class SalesmanCart(StatesGroup):
    buyer_id = State()


async def generate_main_menu(user):
    stage = user.get("stage", 0)
    if stage == 0:  # —É—á–∞—Å—Ç–Ω–∏–∫
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõçÔ∏è", callback_data="view_products"),
                 InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üß∫", callback_data="purchases")],
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ üí∏", callback_data="transfer_funds"),
                 InlineKeyboardButton(text="–ü–æ–º–æ—â—å üÜò", callback_data="help")]
            ]
        )
    elif stage == 1:  # —ç—Ç–∞–ø—â–∏–∫
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø", callback_data="start_stage"),
                 InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")]
            ]
        )
    elif stage == 2:  # –ø—Ä–æ–¥–∞–≤–µ—Ü
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="view_products_salesman"),
                 InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="members_purchases")],
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")]
            ]
        )
    elif stage == 3:  # RTUITLab
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø", callback_data="start_stage"),
                 InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")]
            ]
        )
    else:
        await db.change_user_stage(user["stage"], 0)
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõçÔ∏è", callback_data="view_products"),
                 InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üß∫", callback_data="purchases")],
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ üí∏", callback_data="transfer_funds"),
                 InlineKeyboardButton(text="–ü–æ–º–æ—â—å üÜò", callback_data="help")]
            ]
        )


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if user:
        return

    await message.answer_sticker(r"CAACAgIAAxkBAAEM7c9nAwuUZBCLVlLpmPHfk4bNQcpXOwACHwADWbv8Jeo5dBvZPTaZNgQ")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                         "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ü–∞–Ω–¥–∏—Ç–æ!</b> üêº\n"
                         "–Ø –±—É–¥—É —Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ <u>–ò—Ç–∫–æ–∏–Ω—ã</u> –∏ –æ–ø–æ–≤–µ—â–∞—Ç—å —Ç–µ–±—è –æ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
                         "–ø—Ä–∏—É—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!\n\n"
                         "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ —Å–≤–æ—é <b>—Ñ–∞–º–∏–ª–∏—é</b> –∏ <b>–∏–º—è</b>\n<i>"
                         "(–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –í–∞–Ω—è)</i>",
                         parse_mode="HTML")
    await state.set_state(Registration.name)


@dp.message(StateFilter(Registration.name))
async def reg_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+$", full_name):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return

    await state.update_data(full_name=full_name)
    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="yes"),
             InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="no")]
        ]
    )
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n–í–∞—Å –∑–æ–≤—É—Ç <b>{full_name}</b>?",
                         reply_markup=confirm_kb,
                         parse_mode="HTML")
    await state.set_state(Registration.confirm)
    await state.update_data(name=full_name)


@dp.callback_query(StateFilter(Registration.confirm), F.data == "yes")
async def reg_confirm_yes(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    user_id = await db.create_user(
        callback.from_user.id, state_data["name"], callback.from_user.id == OWNER
    )
    kb = [[KeyboardButton(text="/menu")]]
    kb_menu = ReplyKeyboardMarkup(keyboard=kb,
                                  resize_keyboard=True,
                                  one_time_keyboard=True)
    await callback.message.delete()

    await callback.message.answer_sticker(r"CAACAgIAAxkBAAEM7dhnAxdZxlqB__bt8a5GR5wo9-vxJAACDQADWbv8JS5RHx3i_HUDNgQ")
    await callback.message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! üéâ\n\n<b>–í–∞—à id: {user_id}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑—ã–≤–∞—Ç—å <b>–º–µ–Ω—é</b> –∫–æ–º–∞–Ω–¥–æ–π <i>/menu</i>",
        reply_markup=kb_menu,
        parse_mode="HTML"
    )
    await state.clear()


@dp.callback_query(StateFilter(Registration.confirm), F.data == "no")
async def reg_confirm_no(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_data({})
    await callback.message.answer("–ë—ã–≤–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    await state.set_state(Registration.name)
    await callback.message.delete()


@dp.message(Command(commands=["menu"]))
async def menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer_sticker(r"CAACAgIAAxkBAAEM7eFnAzNGgGnjM59XOgjO_cpmrvdFhAACFwADWbv8Jfuhn7EBJTs2NgQ")
    user = await db.get_user(message.from_user.id)
    menu_kb = await generate_main_menu(user)

    await message.answer(
        f"<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í–∞—à id: {user['id']}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} <b>–ò—Ç</b>."
        f"{'\n\n<u>–í—ã ‚Äî —ç—Ç–∞–ø—â–∏–∫</u>\n' if user['stage'] == 1 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü</u>\n' if user['stage'] == 2 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî RTUITLab</u>\n' if user['stage'] == 3 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</u>\n' if user['is_admin'] else ''}",
        reply_markup=menu_kb,
        parse_mode="HTML"
    )
    await message.delete()


@dp.callback_query(F.data == "cancel")
async def menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user = await db.get_user(callback.from_user.id)
    menu_kb = await generate_main_menu(user)

    await callback.message.answer(
        f"<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í–∞—à id: {user['id']}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} <b>–ò—Ç</b>."
        f"{'\n\n<u>–í—ã ‚Äî —ç—Ç–∞–ø—â–∏–∫</u>\n' if user['stage'] == 1 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü</u>\n' if user['stage'] == 2 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî RTUITLab</u>\n' if user['stage'] == 3 else ''}"
        f"{'\n\n<u>–í—ã ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</u>\n' if user['is_admin'] else ''}",
        reply_markup=menu_kb,
        parse_mode="HTML"
    )
    await callback.message.delete()


@dp.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.delete()


@dp.callback_query(F.data == "transfer_funds")
async def transfer_funds(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.set_state(TransferFunds.receiver_id)
    ckb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <b>–ò—Ç–∫–æ–∏–Ω—ã</b>",
                                  reply_markup=ckb,
                                  parse_mode="HTML")


@dp.message(StateFilter(TransferFunds.receiver_id))
async def transfer_funds_id(message: Message, state: FSMContext):
    id = message.text.strip()
    if not re.match(r"^\d+$", id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return
    receiver = await db.get_user_by_id(int(id))
    if not receiver:
        ckb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=ckb)
        return
    ckb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    )
    await state.update_data(receiver_id=id, receiver_tg=receiver["tg"])
    await state.set_state(TransferFunds.amount)
    await message.answer(
        f"–ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º <b>{receiver["name"]}</b>\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞",
        reply_markup=ckb,
        parse_mode="HTML"
    )


@dp.message(StateFilter(TransferFunds.amount))
async def transfer_funds_amount(message: Message, state: FSMContext):
    amount = message.text.strip()
    if not re.match(r"^\d+$", amount) or int(amount) == 0:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        return
    user = await db.get_user(message.from_user.id)
    ckb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    )
    scb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
        ]
    )
    if user["balance"] < int(amount):
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É", reply_markup=ckb
        )
    data = await state.get_data()
    await db.transfer_funds(int(user["id"]), int(data["receiver_id"]), int(amount))
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=scb
    )
    await bot.send_message(data["receiver_tg"], f"–í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount.lstrip("0")} –ò—Ç.!")
    await state.clear()


@dp.callback_query(F.data == "view_products")
async def view_products(callback: CallbackQuery):
    await callback.answer()
    products = await db.get_available_products()
    user = await db.get_user(callback.from_user.id)
    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")]
        ]
    )
    if products:
        product_kb = [
            [InlineKeyboardButton(
                text=f"{product["name"]} ‚Äî {product["price"]} –ò—Ç.",
                callback_data=ViewProductCallback(id=int(product["id"])).pack(),
            )] for product in products
        ]
        product_kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")])
        p_kb = InlineKeyboardMarkup(inline_keyboard=product_kb)

        await callback.message.answer(
            f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üõçÔ∏è\n\n–ë–∞–ª–∞–Ω—Å: {user["balance"]} –ò—Ç.", reply_markup=p_kb
        )
    else:
        await callback.message.answer("–£–ø—Å, —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç", reply_markup=c_bk)
    await callback.message.delete()


@dp.callback_query(ViewProductCallback.filter())
async def view_product(callback: CallbackQuery, callback_data: ViewProductCallback):
    await callback.answer()
    await callback.message.delete()
    product = await db.get_product(callback_data.id)
    if int(product["stock"]) > 0:
        b_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–ö—É–ø–∏—Ç—å - {product["price"]} –ò—Ç.",
                        callback_data=BuyProductCallback(id=int(product["id"])).pack(),
                    ),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="view_products"),
                ]
            ]
        )
        await callback.message.answer(
            f"{product["id"]}. <b>{product["name"]}</b>\n\n{product["description"]}",
            reply_markup=b_kb,
            parse_mode="HTML"
        )
    else:
        c_bk = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="view_products")]
            ]
        )
        await callback.message.answer("–£–ø—Å, —É–∂–µ —Ä–∞—Å–∫—É–ø–∏–ª–∏", reply_markup=c_bk)


@dp.callback_query(BuyProductCallback.filter())
async def buy_product(callback: CallbackQuery, callback_data: BuyProductCallback):
    await callback.answer()
    product = await db.get_product(callback_data.id)
    user = await db.get_user(callback.from_user.id)
    shop_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω", callback_data="view_products")]
        ]
    )
    if int(product["stock"]) > 0:
        if user["balance"] >= product["price"]:
            await db.buy_product(int(user["id"]), int(product["id"]), 1)
            await callback.message.answer("–¢–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=shop_bk)
        else:
            await callback.message.answer("–£–ø—Å, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <b>–ò—Ç–∫–æ–∏–Ω–æ–≤</b>!",
                                          reply_markup=shop_bk,
                                          parse_mode="HTML")
    else:
        await callback.message.answer("–£–ø—Å, –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Ä–∞—Å–∫—É–ø–∏–ª–∏", reply_markup=shop_bk)
    await callback.message.delete()


@dp.callback_query(F.data == "purchases")
async def purchases(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    user = await db.get_user(callback.from_user.id)
    purchases = await db.get_user_purchases(int(user["id"]))
    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")]
        ]
    )
    if purchases:
        purchases_list = "\n".join(
            [f"{purchase['product_name']} x{purchase['quantity_purchased']}" for purchase in purchases]
        )

        full_message = (
            "<b>–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b> üß∫\n\n"
            f"{purchases_list}\n\n"
            "–ß—Ç–æ–±—ã –∏—Ö –∑–∞–±—Ä–∞—Ç—å, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ <u>–º–∞–≥–∞–∑–∏–Ω—É</u>, –ª–∏–±–æ –≤ <u>–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ê-337</u>"
        )

        await callback.message.answer(
            full_message, reply_markup=c_bk, parse_mode="HTML"
        )
    else:
        await callback.message.answer("<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>",
                                      reply_markup=c_bk,
                                      parse_mode="HTML")


@dp.callback_query(F.data == "help")
async def help_message(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")]
        ]
    )

    await callback.message.answer(f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ <b>–ü–∞–Ω–¥–∏—Ç–æ</b> "
                                  f"‚Äî –ø–∏—à–∏—Ç–µ @whatochka",
                                  reply_markup=c_bk,
                                  parse_mode="HTML")


# ------------------------------------------------------------------------------------------ –≠—Ç–∞–ø—â–∏–∫
@dp.callback_query(F.data == "start_stage")
async def start_stage(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StartStage.participant_id)
    await callback.message.delete()
    ckb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ id —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –Ω–∞ —ç—Ç–∞–ø:", reply_markup=ckb)


@dp.message(StateFilter(StartStage.participant_id))
async def stage_participant_id(message: Message, state: FSMContext):
    participant_id = message.text.strip()
    if not re.match(r"^\d+$", participant_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id
    user_id = await db.get_user_by_id(int(participant_id))
    user = await db.get_user(message.from_user.id)
    if not user_id:
        await message.answer("–¢–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    await state.update_data(participant_id=participant_id)

    if user["stage"] == 1:
        ckb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="10", callback_data="reward_10")],
                [InlineKeyboardButton(text="20", callback_data="reward_20")],
                [InlineKeyboardButton(text="30", callback_data="reward_30")]
            ]
        )
    else:
        ckb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="10", callback_data="reward_10")]
            ]
        )
    await state.set_state(StartStage.reward_amount)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=ckb)


@dp.callback_query(StateFilter(StartStage.reward_amount), F.data.startswith("reward_"))
async def stage_reward(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    amount = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data (10, 20, 30)
    data = await state.get_data()
    user = await db.get_user(callback.from_user.id)
    participant_id = int(data['participant_id'])

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="start_stage")]
        ]
    )

    # –ù–∞—á–∏—Å–ª—è–µ–º –≤–∞–ª—é—Ç—É
    await db.update_user_balance(participant_id, amount, user['id'])

    await callback.message.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫—É —Å id {participant_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ò—Ç.",
                                  reply_markup=c_bk)
    await state.clear()


# ------------------------------------------------------------------------------------------ –≠—Ç–∞–ø—â–∏–∫
# ------------------------------------------------------------------------------------------ –ü—Ä–æ–¥–∞–≤–µ—Ü
@dp.callback_query(F.data == "view_products_salesman")
async def view_products_salesman(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    products = await db.get_available_products()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if products:
        product_kb = [
            [InlineKeyboardButton(
                text=f"{product['name']} - {product['price']} –ò—Ç.",
                callback_data=f"salesman_select_product_{product['id']}"
            )] for product in products
        ]
        product_kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")])
        p_kb = InlineKeyboardMarkup(inline_keyboard=product_kb)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=p_kb)
    else:
        await callback.message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.")


@dp.callback_query(F.data.startswith("salesman_select_product_"))
async def salesman_select_product(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    await state.set_state(SalesmanShop.buyer_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä.")


@dp.message(StateFilter(SalesmanShop.buyer_id))
async def salesman_buyer_id(message: Message, state: FSMContext):
    buyer_id = message.text.strip()
    if not re.match(r"^\d+$", buyer_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await db.get_user_by_id(int(buyer_id))
    if not user:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="view_products_salesman")]
        ]
    )

    data = await state.get_data()
    product_id = data['product_id']
    product = await db.get_product(product_id)

    if user['balance'] >= product['price']:
        # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        await db.buy_product(int(buyer_id), int(product_id), 1)

        await message.answer(f"–£—Å–ø–µ—Ö! {user['name']} –∫—É–ø–∏–ª {product['name']} –∑–∞ "
                             f"{product['price']} –ò—Ç.",
                             reply_markup=c_bk)
    else:
        await message.answer("–£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=c_bk)

    await state.clear()


@dp.callback_query(F.data == "members_purchases")
async def view_members_purchases(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await state.set_state(SalesmanCart.buyer_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ id —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—å—é –∫–æ—Ä–∑–∏–Ω—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")


@dp.message(StateFilter(SalesmanCart.buyer_id))
async def show_cart(message: Message, state: FSMContext):
    buyer_id = message.text.strip()
    if not re.match(r"^\d+$", buyer_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await db.get_user_by_id(int(buyer_id))
    if not user:
        await message.answer("–¢–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    purchases = await db.get_user_purchases(int(buyer_id))

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")]
        ]
    )

    if purchases:
        cart_text = "\n".join(
            [f"{purchase['product_name']} x{purchase['quantity_purchased']}" for purchase in purchases])
        confirm_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_clear_cart_{buyer_id}")]]
        )
        await message.answer(f"–ö–æ—Ä–∑–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user['name']}:\n\n{cart_text}", reply_markup=confirm_kb)
    else:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=c_bk)

    await state.clear()


@dp.callback_query(F.data.startswith("confirm_clear_cart_"))
async def confirm_clear_cart(callback: CallbackQuery):
    buyer_id = int(callback.data.split("_")[-1])

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.clear_user_purchases(buyer_id)

    c_bk = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ üîô", callback_data="cancel")]
        ]
    )

    await callback.message.answer(f"–ö–æ—Ä–∑–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å id {buyer_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", reply_markup=c_bk)
    await callback.message.delete()


@dp.message(Command(commands=["broadcast"]), StateFilter(None))
async def admin_broadcast(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args:
        text = command.args
        users = await db.get_all_users()
        for user in users:
            await bot.send_message(user["tg"], text)
        await message.answer("–£—Å–ø–µ—à–Ω—ã–π —É—Å–ø–µ—Ö")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /broadcast <message>")


@dp.message(Command(commands=["money"]), StateFilter(None))
async def admin_add_money(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args and len(command.args.split()) == 2:
        args = command.args.split()
        user_id, amount = int(args[0]), int(args[1])
        await db.update_user_balance(user_id, amount, user["id"])
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /money <user_id> <amount>")


@dp.message(Command(commands=["stage"]), StateFilter(None))
async def admin_change_stage(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args and len(command.args.split()) == 2:
        args = command.args.split()
        user_id, stage = int(args[0]), int(args[1])
        await db.change_user_stage(user_id, stage)
        await message.answer("–£—Å–ø–µ—Ö!")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /stage <user_id> <stage>")


@dp.message(Command(commands=["product"]), StateFilter(None))
async def admin_new_product(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args and len(command.args.split()) >= 4:
        args = command.args.split()
        name, price, stock, description = args[0], int(args[1]), int(args[2]), args[3:]
        id = await db.create_product(name, " ".join(description), price, stock)
        await message.answer(f"–£—Å–ø–µ—Ö! Id: {id}")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /product <name> <price> <stock> <description>")


@dp.message(Command(commands=["stock"]), StateFilter(None))
async def admin_update_stock(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return

    if command.args and len(command.args.split()) == 2:
        args = command.args.split()
        product_id, new_stock = int(args[0]), int(args[1])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        updated_stock = await db.update_product_stock(product_id, new_stock)
        if updated_stock is not None:
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_stock}")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID {product_id}")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /stock <id> <new_stock>")


@dp.message(Command(commands=["price"]), StateFilter(None))
async def admin_change_product_price(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return

    if command.args and len(command.args.split()) == 2:
        args = command.args.split()
        product_id, new_price = int(args[0]), int(args[1])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        updated_price = await db.change_product_price(product_id, new_price)
        if updated_price is not None:
            await message.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id}")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /price <id> <new_price>")


@dp.message(Command(commands=["logs"]), StateFilter(None))
async def admin_view_logs(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args and len(command.args.split()) == 1:
        user_id = int(command.args.strip())
        logs = await db.get_user_logs(user_id)
        log_texts = [f"{log['created_at']}: {log['description']}" for log in logs][:10]
        await message.answer("\n".join(log_texts) or "–ù–µ—Ç –ª–æ–≥–æ–≤")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /logs <user_id>")


@dp.message(Command(commands=["list_users"]))
async def list_users(message: Message):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = await db.get_all_users()
    if users:
        user_list = "\n".join(
            [f"ID: {user['id']}, –§–ò–û: {user['name']}, –ë–∞–ª–∞–Ω—Å: {user['balance']} –ò—Ç." for user in users])
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n{user_list}", parse_mode="HTML")
    else:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")


@dp.message(Command(commands=["delete_product"]), StateFilter(None))
async def admin_delete_product(message: Message, command: CommandObject):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.delete()
        return
    if command.args and len(command.args.split()) == 1:
        product_id = int(command.args)
        await db.delete_product(product_id)
        await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /delete_product <id>")


@dp.message(Command(commands=["list_products"]), StateFilter(None))
async def admin_list_products(message: Message):
    user = await db.get_user(message.from_user.id)
    if not user["is_admin"]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    products = await db.get_all_products()
    if products:
        product_list = "\n".join([
                                     f"ID: {product['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}, –¶–µ–Ω–∞: {product['price']} –ò—Ç., "
                                     f"–û—Å—Ç–∞—Ç–æ–∫: {product['stock']}"
                                     for product in products])
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n{product_list}", parse_mode="HTML")
    else:
        await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")


@dp.message(StateFilter(None))
async def unknown_msg(message: Message):
    await message.delete()


async def main():
    global db
    await db.init(DATABASE_URL)
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands([BotCommand(command="menu", description="–ú–µ–Ω—é")])
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
